buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.bmuschko.docker-remote-api'
//apply plugin: 'org.junit.platform.gradle.plugin'



import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer

repositories {
    mavenCentral()
    maven { url "${artifactRepoURL}/repository/attx-releases"}
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.0",
        'org.junit.platform:junit-platform-runner:1.0.1',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.5.0',
        'org.awaitility:awaitility-groovy:3.0.0',
        'org.uh.hulib.attx.dev:dev-test-helper:1.5',
        'org.uh.hulib.attx.wc.uv:uv-common:1.0-SNAPSHOT',
        'com.rabbitmq:amqp-client:4.2.0'
    testRuntime \
        "org.junit.jupiter:junit-jupiter-engine:5.0.0",
        'org.junit.vintage:junit-vintage-engine:4.12.0'

}

ext.attxTestHelperPlugin = '1.5'
ext.uvreplaceDS = '1.0-SNAPSHOT'

ext {
    testTag           = "latest"
    testImageUVProv   = "${testTag}"
    testImageRML      = "${testTag}"
    testImageProv     = "${testTag}"
    testImageGM       = "${testTag}"
    testImageFuseki   = "${testTag}"
    testImageES5      = "${testTag}"
    testImageESSiren  = "${testTag}"
    testImageATTXDPUs = "${testTag}"
}

// setup default volume location to /tmp
if (!project.hasProperty("volumeDir")) {
    ext.volumeDir = "/attx-sb-shared/data"
} else {
    ext.volumeDir = project.volumeDir
}

ext.src = [
    "${artifactRepoURL}/restServices/archivaServices/searchService/artifact?g=org.uh.hulib.attx.wc.uv&a=attx-l-replaceds&v=${uvreplaceDS}&p=jar":"attx-l-replaceds-${uvreplaceDS}.jar"
]

import de.undercouch.gradle.tasks.download.Download
task downloadTestFiles

for (s in src) {
    task "downloadTestFiles_${s.key.hashCode()}"(type: Download) {
        src s.key
        dest new File("$projectDir", s.value)
    }
    downloadTestFiles.dependsOn("downloadTestFiles_${s.key.hashCode()}")
}

if (!project.hasProperty("testEnv") || project.testEnv == "dev") {
    ext.testSet = "localhost"
} else if (project.testEnv == "CI"){
    ext.testSet = "container"
} else {
    throw new GradleException("Build project environment option not recognised.")
}

// These parameters should be set before the tests are run,
// if there different combinations need to be tested

dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {
        // no user/pass
    }
    networks {
        pdTest
    }
    messagebroker {
        forcePull = true
        forceRemoveImage = true
        image = 'rabbitmq:3.6.12-management'
        networks = [pdTest]
        if (testSet == "localhost") {
            portBindings = ['4369:4369','5671:5671', '5672:5672', '15671:15671', '15672:15672', '25672:25672']
        }
        env = ['RABBITMQ_DEFAULT_USER=user', 'RABBITMQ_DEFAULT_PASS=password']
    }

    shared {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-shared:stable-1.2'
        networks = [pdTest]
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-mariadb:stable-1.2'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        networks = [pdTest]
        hostName = 'mysql'
        if (testSet == "localhost") {
            portBindings = ['3306:3306']
        }
    }
    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-backend:stable-1.2'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
        networks = [pdTest]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-frontend:stable-1.2'
        volumesFrom = [shared]
        dependsOn = [backend, shared]
        networks = [pdTest]
        hostName = 'frontend'
        if (testSet == "localhost") {
            portBindings = ['8080:8080']
        }
    }

    attxdpus {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-dpus:${testImageATTXDPUs}"
        links = [frontend.link(), mysql.link(), backend.link()]
        dependsOn = [mysql, backend, frontend]
        networks = [pdTest]
    }

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${testImageFuseki}"
        networks = [pdTest]
        hostName = 'fuseki'
        if (testSet == "localhost") {
            portBindings = ['3030:3030']
        }
        env = ['ADMIN_PASSWORD=pw123']
    }

    // essiren {
    //     forcePull = true
    //     forceRemoveImage = true
    //     image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
    //     networks = [pdTest]
    //     hostName = 'essiren'
    //     if (testSet == "localhost") {
    //         portBindings = ['9200:9200', '9300:9300']
    //     }
    // }

    es5 {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-es5:${testImageES5}"
        networks = [pdTest]
        hostName = 'es5'
        if (testSet == "localhost") {
            portBindings = ['9210:9210', '9310:9310']
        }
    }

    uvprov {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-prov:${testImageUVProv}"
        dependsOn = [messagebroker, mysql]
        networks = [pdTest]
        hostName = 'uvprov'
        if (testSet == "localhost") {
            portBindings = ['4301:4301']
        }
        env = ['MHOST=messagebroker', 'DBHOST=mysql']
    }

    rmlservice {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/rml-service:${testImageRML}"
        dependsOn = [messagebroker]
        networks = [pdTest]
        hostName = 'rmlservice'
        if (testSet == "localhost") {
            portBindings = ['8090:8090']
        }
        env = ['MHOST=amqp://messagebroker', 'MUSER=user', 'MPASS=password', 'MEXCHANGE=', 'MQUEUE=rmlservice']
        volumes = ['/attx-sb-shared']
        binds = ["${volumeDir}:/attx-sb-shared:rw"]
    }

    provservice {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/provenance-service:${testImageProv}"
        dependsOn = [fuseki, messagebroker]
        networks = [pdTest]
        hostName = 'provservice'
        if (testSet == "localhost") {
            portBindings = ['7030:7030']
        }
        env = ['MHOST=messagebroker', 'GHOST=fuseki']
    }

    graphmanager {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${testImageGM}"
        dependsOn = [messagebroker, provservice, uvprov, rmlservice, attxdpus, es5]
        networks = [pdTest]
        hostName = 'graphmanager'
        if (testSet == "localhost") {
            portBindings = ['4302:4302']
        }
        env = ['MHOST=messagebroker', 'GHOST=fuseki']
        volumes = ['/attx-sb-shared']
        binds = ["${volumeDir}:/attx-sb-shared:rw"]
    }
    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        buildArgs = ['UVreplaceDS': "$uvreplaceDS"]
        env = ["REPO=$artifactRepoURL"]
        if (testSet == "container") {
            binds = ["/var/run/docker.sock:/run/docker.sock"]
        }
        dependsOn = [graphmanager] // This dependency is not really needed however it reminds the scope of the tests.
        command = ['sh', '-c', '/tmp/runTests.sh']
        waitForCommand = true
        forceRemoveImage = true
        attachStdout = true
        attachStderr = true
        networks = [pdTest]
        volumes = ['/attx-sb-shared']
        binds = ["${volumeDir}:/attx-sb-shared:rw"]
    }

}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports/tests'
    destinationDir = file("build/reports/")
    cleanDestinationDir = false
    dependsOn startTestContainer
}

startTestContainer.finalizedBy copyReportFiles


// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn downloadTestFiles
buildTestImage.dependsOn testClasses
buildTestImage.dependsOn processTestResources

task checkDPUDone(type: DockerWaitContainer) {
    dependsOn startGraphmanagerContainer
    targetContainerId {dcompose.attxdpus.containerId}
    doLast{
        if(getExitCode() != 0) {
            println "ATTX DPU Container failed with exit code \${getExitCode()}"
        } else {
            println "Everything is peachy."
        }
    }
}

startTestContainer.dependsOn checkDPUDone

task runContainerTests {
    dependsOn startTestContainer
    finalizedBy removeImages
    doLast {
        if(dcompose.test.exitCode != 0){ throw new GradleException("Tests within the container Failed!") }
    }
}

// TO DO: find a fix so we can run the test locally preferably while waiting for other stuff to be there. MYSQL is the one that we need to wait for.

task runIntegTests(type: Test) {
    dependsOn checkDPUDone
    Map<String, Integer> serviceMap = [ "frontend" : 8080,
                  "uvprov" : 4301,
                  "provservice" : 7030,
                  "fuseki" : 3030,
                  "graphmanager" : 4302,
                  "es5": 9210,
                  "rmlservice": 8090 ]
    ext.getHostPort = {services ->
        serviceMap.each{ host, port ->
            if (project.testEnv == "dev" && project.runEnv == "console") {
                systemProperty "${host}.port", "${port}"
                systemProperty "${host}.host", "localhost"
            } else {
                systemProperty "${host}.port", dcompose."${host}".findHostPort("${port}".toInteger())
                systemProperty "${host}.host", dcompose."${host}".dockerHost
                // println dcompose."${host}".dockerHost
            }
         }
    }

    ext.removeHostPort = { services ->
        serviceMap.each{ host, port ->
            systemProperties.remove "${host}.port"
            systemProperties.remove "${host}.host"
         }
    }

    doFirst {
        getHostPort(serviceMap)
    }
    doLast {
        removeHostPort(serviceMap)
    }

    // if (project.runEnv != "console"){
    //     finalizedBy removeImages
    // }
}
